var _user$project$Main$onLinkClick = function (message) {
	var options = {stopPropagation: false, preventDefault: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		options,
		_elm_lang$core$Json_Decode$succeed(message));
};
var _user$project$Main$aboutPath = '/about';
var _user$project$Main$homePath = '/';
var _user$project$Main$page = function (model) {
	var _p0 = model.route;
	switch (_p0.ctor) {
		case 'HomeRoute':
			return _elm_lang$html$Html$text('Home');
		case 'AboutRoute':
			return _elm_lang$html$Html$text('About');
		default:
			return _elm_lang$html$Html$text('Not Found');
	}
};
var _user$project$Main$viewStudent = function (student) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							student.name,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' (',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(student.age),
									')')))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(student.subject),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(student.classification),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$viewBody = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Enrolled Students'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Name (Age)'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Course'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Type'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _user$project$Main$viewStudent, model.students)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$initialModel = function (route) {
	return {
		students: {
			ctor: '::',
			_0: {name: '', age: 0, subject: '', classification: ''},
			_1: {ctor: '[]'}
		},
		route: route,
		changes: 0
	};
};
var _user$project$Main$Student = F4(
	function (a, b, c, d) {
		return {name: a, age: b, subject: c, classification: d};
	});
var _user$project$Main$studentDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'classification',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'subject',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'age',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'name',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Student)))));
var _user$project$Main$decodeList = _elm_lang$core$Json_Decode$list(_user$project$Main$studentDecoder);
var _user$project$Main$decoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'data',
		_1: {ctor: '[]'}
	},
	_user$project$Main$decodeList);
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {students: a, route: b, changes: c};
	});
var _user$project$Main$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _user$project$Main$AboutRoute = {ctor: 'AboutRoute'};
var _user$project$Main$HomeRoute = {ctor: 'HomeRoute'};
var _user$project$Main$matchers = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(_evancz$url_parser$UrlParser$map, _user$project$Main$HomeRoute, _evancz$url_parser$UrlParser$top),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_user$project$Main$AboutRoute,
				_evancz$url_parser$UrlParser$s('about')),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$parseLocation = function (location) {
	var _p1 = A2(_evancz$url_parser$UrlParser$parsePath, _user$project$Main$matchers, location);
	if (_p1.ctor === 'Just') {
		return _p1._0;
	} else {
		return _user$project$Main$NotFoundRoute;
	}
};
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Main$parseLocation(location);
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(currentRoute),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'StudentData':
				if (_p2._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{students: _p2._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ChangeLocation':
				var _p4 = _p2._0;
				var _p3 = A2(_elm_lang$core$Debug$log, 'Path', _p4);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{changes: model.changes + 1}),
					_1: _elm_lang$navigation$Navigation$newUrl(_p4)
				};
			default:
				var newRoute = _user$project$Main$parseLocation(_p2._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: newRoute}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$OnLocationChange = function (a) {
	return {ctor: 'OnLocationChange', _0: a};
};
var _user$project$Main$ChangeLocation = function (a) {
	return {ctor: 'ChangeLocation', _0: a};
};
var _user$project$Main$nav = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(_user$project$Main$homePath),
					_1: {
						ctor: '::',
						_0: _user$project$Main$onLinkClick(
							_user$project$Main$ChangeLocation(_user$project$Main$homePath)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Home'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_user$project$Main$aboutPath),
							_1: {
								ctor: '::',
								_0: _user$project$Main$onLinkClick(
									_user$project$Main$ChangeLocation(_user$project$Main$aboutPath)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('About'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								' ',
								_elm_lang$core$Basics$toString(model.changes))),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$nav(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$page(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$viewBody(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$OnLocationChange,
	{
		init: _user$project$Main$init,
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: function (_p5) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
var _user$project$Main$StudentData = function (a) {
	return {ctor: 'StudentData', _0: a};
};
var _user$project$Main$initialCmd = A2(
	_elm_lang$http$Http$send,
	_user$project$Main$StudentData,
	A2(_elm_lang$http$Http$get, 'http://localhost:4000/students', _user$project$Main$decoder));
